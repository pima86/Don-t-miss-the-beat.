using System.Collections;
using System.Collections.Generic;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using UnityEngine;
using TMPro;

public class Player_Move : MonoBehaviour
{
    #region inst
    public static Player_Move Inst { get; private set; }
    void Awake() => Inst = this;
    #endregion
    [Header("캐릭터 정보")]
    public Transform main_point;
    [SerializeField] TMP_Text Gem_text;
    [SerializeField] TMP_Text Coin_text;
    [SerializeField] Image[] Hp_bar;
    [SerializeField] Sprite[] Hp_Spr;

    //묘지
    [SerializeField] GameObject[] Stamp;
    [SerializeField] GameObject[] Clear_obj;
    [SerializeField] GameObject[] main;

    [SerializeField] GameObject[] Number;
    [SerializeField] Sprite[] Number_sprite;

    #region 캐릭터 변수
    int gem = 0;
    public int Gem
    {
        set
        {
            Gem_text.text = value.ToString();
            gem = value;
        }
        get
        {
            return gem;
        }
    }

    int coin = 0;
    public int Coin
    {
        set
        {
            Coin_text.text =  value.ToString();
            coin = value;
        }
        get
        {
            return coin;
        }
    }
    float hp = 3;
    public float HP
    {
        set
        {
            if (value < 0 || value > 3)
                return;

            float hp_value = value;
            int add = 0;

            while (add < 3)
            {
                if (hp_value >= 1)
                {
                    hp_value--;

                    Hp_bar[add].sprite = Hp_Spr[2];
                    add++;
                }
                else if (hp_value >= 0.5f)
                {
                    hp_value -= 0.5f;

                    Hp_bar[add].sprite = Hp_Spr[1];
                    add++;
                }
                else
                {
                    Hp_bar[add].sprite = Hp_Spr[0];
                    add++;
                }
            }
            if (value == 0)
            {
                Die(true);
                End();
            }
            hp = value;
        }
        get
        {
            return hp;
        }
    }
    int lv = 0;
    public int LV
    {
        set
        {
            if (lv == value)
                return;

            if (value > 999)
                value = 999;

            else if (value < 0)
                value = 0;

            if (value > 9)
            {
                if (value > 99)
                {
                    Number[0].SetActive(true);
                    Number[1].SetActive(true);
                    Number[2].SetActive(true);

                    Number[3].SetActive(true);

                    Number[0].GetComponent<Image>().sprite = Number_sprite[(value % 1000) / 100];
                    Number[1].GetComponent<Image>().sprite = Number_sprite[(value % 100) / 10];
                    Number[2].GetComponent<Image>().sprite = Number_sprite[(value % 10)];
                }
                else
                {
                    Number[0].SetActive(false);
                    Number[1].SetActive(true);
                    Number[2].SetActive(true);

                    Number[3].SetActive(true);

                    Number[1].GetComponent<Image>().sprite = Number_sprite[(value % 100) / 10];
                    Number[2].GetComponent<Image>().sprite = Number_sprite[(value % 10)];
                }
            }
            else
            {
                if (value != 0)
                {
                    Number[0].SetActive(false);
                    Number[1].SetActive(true);
                    Number[2].SetActive(false);

                    Number[3].SetActive(true);

                    Number[1].GetComponent<Image>().sprite = Number_sprite[(value % 10)];
                }
                else
                {
                    Number[0].SetActive(false);
                    Number[1].SetActive(false);
                    Number[2].SetActive(false);

                    Number[3].SetActive(false);
                }
            }

            combo_particle.Inst.Combo_Setting(value);
            lv = value;
        }
        get
        {
            return lv;
        }
    }
    #endregion

    [Header("캐릭터 스프라이트")]
    public GameObject[] body_obj;
    public SpriteRenderer body;
    public SpriteRenderer face;

    [Header("좌표 표시 이미지")]
    [SerializeField] SpriteRenderer[] target;
    [SerializeField] Sprite[] target_sprte;
    public int[] move_point = new int[4];

    //0 => 이동불가판정
    //1 => 이동가능판정
    //2 => 공격가능판정

    #region 레벨
    bool coroutine_circle = false;
    int lv_num = 0;
    public void level_stop()
    {
        lv = 0;
        StopAllCoroutines();
    }

    public void level_up(int num)
    {
        if (coroutine_circle)
        {
            StopAllCoroutines();
            StartCoroutine(level_up_coroutine(lv_num + num));
        }
        else
            StartCoroutine(level_up_coroutine(num));
    }

    IEnumerator level_up_coroutine(int num)
    {
        coroutine_circle = true;
        lv_num = num - LV;

        while (LV < num)
        {
            LV++;
            lv_num--;
            yield return new WaitForSeconds(0.01f);
        }
        coroutine_circle = false;
    }
    #endregion
    #region 다이 엔드 클리어 리스타스
    public void Die(bool set)
    {
        body_obj[1].SetActive(set);
        body_obj[2].SetActive(!set);
    }

    public void End()
    {
        SoundManager.Inst.end_music = true;
        for (int i = 0; i < Stamp.Length; i++)
            Stamp[i].SetActive(true);

        for (int i = 0; i < main.Length; i++)
            main[i].SetActive(false);

        Player.Inst.Gem += Gem;
        Player.Inst.Coin += Coin;
    }

    public void Clear()
    {
        for (int i = 0; i < Stamp.Length; i++)
            Clear_obj[i].SetActive(true);

        for (int i = 0; i < main.Length; i++)
            main[i].SetActive(false);

        Player.Inst.Gem += Gem;
        Player.Inst.Coin += Coin;
    }

    public void ReStart()
    {
        HP = 3;
        LV = 0;

        Die(false);
        body_obj[0].SetActive(true);

        for (int i = 0; i < Stamp.Length; i++)
            Stamp[i].SetActive(false);

        for (int i = 0; i < main.Length; i++)
            main[i].SetActive(true);
    }
    #endregion
    #region check
    public void Check()
    {
        for (int i = 0; i < 4; i++)
        {
            Vector3 pos = new();
            switch (i)
            {
                case 0: //동
                    pos = new Vector3(1, 0.5f, 0);
                    break;
                case 1: //서
                    pos = new Vector3(-1, 0.5f, 0);
                    break;
                case 2: //남
                    pos = new Vector3(0, -0.5f, 0);
                    break;
                case 3: //북
                    pos = new Vector3(0, 1.5f, 0);
                    break;
            }

            RaycastHit2D hit = Physics2D.Raycast(transform.position + pos, transform.forward, 1, LayerMask.GetMask("Move_Layer"));
            //Debug.DrawRay(transform.position + pos, transform.forward, Color.red, 0.3f);
            if (hit.collider != null)
            {
                hit = Physics2D.Raycast(transform.position + pos, transform.forward, 1, LayerMask.GetMask("Object"));
                if (hit.collider != null)
                {
                    if (hit.collider.tag == "Mob")
                        move_point[i] = 2; //몬스터
                    else if (hit.collider.tag == "Box")
                        move_point[i] = 3; //상자
                    else if (hit.collider.tag == "Item")
                        move_point[i] = 4; //아이템
                }
                else
                    move_point[i] = 1;

                target[i].sprite = target_sprte[0];
            }
            else
            {
                move_point[i] = 0;
                target[i].sprite = target_sprte[1];
            }
        }
    }
    #endregion
}
